import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * If child element of title exists, title becomes label of the child of
         * title tag.If child element of title tag does not exists, title is
         * Empty Title
         */
        String title = "Empty Title";
        if (channel.child(getChildElement(channel, "title"))
                .numberOfChildren() > 0) {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        }
        /*
         * If child element of description exists, description becomes label of
         * the child of description tag.If child element of description tag does
         * not exists, description is No description
         */

        String description = "No description";
        if (channel.child(getChildElement(channel, "description"))
                .numberOfChildren() > 0) {
            description = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }
        /*
         * Link Tag must exist and its child element must exist as well link
         * becomes the label of the child element of link tag.
         */
        String link = channel.child(getChildElement(channel, "link")).child(0)
                .label();

        //Outputs to the file
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println(" <h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println(" <p>" + description + "</p>");
        out.println(" <table border=\"1\">");
        out.println(" <tr>");
        out.println("  <th>Date</th>");
        out.println("  <th>Source</th>");
        out.println("  <th>News</th>");
        out.println(" </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //prints out end tags.
        out.println(" </table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        int i = 0;
        while (index == -1 && i < xml.numberOfChildren()) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //Variables and their initial values.
        String title = "No title available";
        String description = "Description does not exist";
        String link = "Link does not exist";
        String pubDate = "No date available";
        String source = "No source available";

        int indexOfTitle = getChildElement(item, "title");
        int indexOfDescription = getChildElement(item, "description");

        /*
         * If title tag exists and child element of title tag exists, sets title
         * to the label of the child element of title tag. Does exact same with
         * description.
         */
        if (indexOfTitle != -1
                && item.child(indexOfTitle).numberOfChildren() > 0) {
            title = item.child(indexOfTitle).child(0).label();
        } else if (indexOfDescription != -1
                && item.child(indexOfDescription).numberOfChildren() > 0) {
            description = item.child(indexOfDescription).child(0).label();
        }

        int indexOfLink = getChildElement(item, "link");
        int indexOfPubDate = getChildElement(item, "pubDate");
        /*
         * If link tag exists, link becomes label of link tag's child
         */
        if (indexOfLink > 0) {
            link = item.child(indexOfLink).child(0).label();
        }
        /*
         * If pubDate tag exists, pubDate becomes the label of the child element
         * of link tag.
         */
        if (indexOfPubDate > 0) {
            pubDate = item.child(indexOfPubDate).child(0).label();
        }

        /*
         * If source tag exists, and child element of source tag exists source
         * becomes the label of the child element of tag.
         *
         */
        int indexOfSource = getChildElement(item, "source");
        if (indexOfSource > 0
                && item.child(indexOfSource).numberOfChildren() > 0) {
            source = item.child(indexOfSource).child(0).label();
        }

        out.println(" <tr>");
        out.println("  <td>" + pubDate + "</td>");

        /*
         * If child text node of source tag exists prints hyperlink with child
         * label if text node of source tag does not exist prints hyperlink with
         * "No source available"
         */

        if (indexOfSource != -1) {
            out.println("  <td><a href="
                    + item.child(indexOfSource).attributeValue("url") + "\">"
                    + source + "</a></td>");
        } else {
            out.println("  <td>" + source + "</td>");
        }

        /*
         * If Title exists, has text node, and link exists print title and link.
         * Or description tag does not have child node and link exists, prints
         * the title with link.
         */

        if (indexOfTitle != -1
                && item.child(indexOfTitle).numberOfChildren() > 0
                && (indexOfLink != -1
                        && item.child(indexOfLink).numberOfChildren() > 0)
                || (indexOfDescription != -1 && item.child(indexOfDescription)
                        .numberOfChildren() == 0)) {
            out.println("  <td><a href =" + link + ">" + title + "</a></td>");
        } else if (indexOfDescription != -1 && (indexOfLink != -1
                && item.child(indexOfLink).numberOfChildren() > 0)) {
            /*
             * If title does not exist, description has text child, and link
             * exists, prints label of description tag with link.
             *
             */
            out.println(
                    "  <td><a href =" + link + ">" + description + "</a></td>");
        } else {
            /*
             * If Both title and description don't have children and tag does
             * not exist. Prints default "No title available" with no link
             */
            out.println("  <td>" + title + "</td>");
        }
        out.println(" </tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */

    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        SimpleWriter outFile = new SimpleWriter1L("test.html");

        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();

        XMLTree xml = new XMLTree1(url);
        /*
         * Checks to see if label is RSS, has attribute called version, and
         * version attribute is 2.0. If it is valid RSS it prints header, then
         * processes each item using loop, then prints footer to file.
         */
        if (xml.label().equals("rss") && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {
            XMLTree channel = xml.child(0);
            outputHeader(channel, outFile);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), outFile);
                }
            }
            outputFooter(outFile);
        } else {
            out.println("Not valid RSS");
        }

        in.close();
        out.close();
    }

}